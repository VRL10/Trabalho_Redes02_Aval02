version: "3.9"

services:
  servidor-sequencial:
    build: . # Constrói imagem usando Dockerfile na pasta atual
    container_name: servidor-sequencial
    command: python3 servidorSequencial.py
    networks: # Este container vai conectar a uma rede
      rede_trabalho:
        ipv4_address: 37.92.0.10

  servidor-concorrente:
    build: .
    container_name: servidor-concorrente
    command: python3 servidorConcorrente.py
    networks:
      rede_trabalho:
        ipv4_address: 37.92.0.11

  cliente-teste:
    build: .
    container_name: cliente-teste
    command: python3 clienteTestes.py # roda o "clienteTestes" por ultimo, apenas quando os 2 servidores estiverem prontos. Assim poderemos fazer os testes.
    networks:
      rede_trabalho:
        ipv4_address: 37.92.0.100
    depends_on:
      - servidor-sequencial # Primeiramente roda o servidor-sequencial
      - servidor-concorrente # Depois rodamos o servidor-concorrente
    volumes:
      - ./resultados:/app/resultados # Cria uma pasta chamada "resultados" e guarda as informações

  analisador-metricas:
    build: .
    container_name: analisador-metricas
    command: python3 analisadorMetricas.py
    networks:
      rede_trabalho:
        ipv4_address: 37.92.0.200
    volumes:
      - ./resultados:/app/resultados
    depends_on:
      - cliente-teste # O analisador-metricas só começa depois que o cliente-teste terminar

networks:
  rede_trabalho:
    driver: bridge # O tipo bridge serve para conseguir com que os conteiners consigam conversar entre si.
    ipam: #  Gerenciador de Endereços IP -> define o endereço de cada container
      config:
        - subnet: 37.92.0.0/16